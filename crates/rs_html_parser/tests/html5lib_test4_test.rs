// AUTOGENERATED FILE
mod test_utils;

mod tests {
    use insta::{assert_debug_snapshot, with_settings};
    use crate::test_utils::*;


// Spec valid tests

    #[test]
    fn dbl_quote_after_ampersand_in_double_hyphen_quoted_attribute_value() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z z="&">"####));
        });
    }

    #[test]
    fn apos1_after_ampersand_in_double_hyphen_quoted_attribute_value() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z z="&'">"####));
        });
    }

    #[test]
    fn apos1_after_ampersand_in_single_hyphen_quoted_attribute_value() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z z='&'>"####));
        });
    }

    #[test]
    fn dbl_quote_after_ampersand_in_single_hyphen_quoted_attribute_value() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z z='&"'>"####));
        });
    }

    #[test]
    fn text_after_bogus_character_reference() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z z='&xlink_xmlns;'>bar<z>"####));
        });
    }

    #[test]
    fn text_after_hex_character_reference() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z z='&#x0020; foo'>bar<z>"####));
        });
    }

    #[test]
    fn quoted_attribute_followed_by_permitted() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<br a='b'/>"####));
        });
    }

    #[test]
    fn quoted_attribute_followed_by_non_hyphen_permitted() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<bar a='b'/>"####));
        });
    }

    #[test]
    fn zero_hyphen_prefixed_hex_numeric_entity() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041;"####));
        });
    }

    #[test]
    fn zero_hyphen_prefixed_decimal_numeric_entity() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065;"####));
        });
    }

    #[test]
    fn non_hyphen_bmp_numeric_entity() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#x10000;"####));
        });
    }

    #[test]
    fn uppercase_start_tag_name() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<X>"####));
        });
    }

    #[test]
    fn uppercase_end_tag_name() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</X>"####));
        });
    }

    #[test]
    fn uppercase_attribute_name() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<x X>"####));
        });
    }

    #[test]
    fn tag_attribute_name_case_edge_values() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<x@AZ[`az{ @AZ[`az{>"####));
        });
    }

    #[test]
    fn permitted_slash() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<br/>"####));
        });
    }

    #[test]
    fn non_hyphen_permitted_slash() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<xr/>"####));
        });
    }

    #[test]
    fn doctype_public_case_hyphen_sensitivity_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DoCtYpE HtMl PuBlIc "AbC" "XyZ">"####));
        });
    }

    #[test]
    fn doctype_public_case_hyphen_sensitivity_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!dOcTyPe hTmL pUbLiC "aBc" "xYz">"####));
        });
    }

    #[test]
    fn doctype_system_case_hyphen_sensitivity_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DoCtYpE HtMl SyStEm "XyZ">"####));
        });
    }

    #[test]
    fn doctype_system_case_hyphen_sensitivity_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!dOcTyPe hTmL sYsTeM "xYz">"####));
        });
    }

    #[test]
    fn cr_followed_by_non_hyphen_lf() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"
?"####));
        });
    }

    #[test]
    fn cr_at_eof() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"
"####));
        });
    }

    #[test]
    fn lf_at_eof() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"
"####));
        });
    }

    #[test]
    fn cr_lf() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"

"####));
        });
    }

    #[test]
    fn cr_cr() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"

"####));
        });
    }

    #[test]
    fn lf_lf() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"

"####));
        });
    }

    #[test]
    fn lf_cr() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"

"####));
        });
    }

    #[test]
    fn text_cr_cr_cr_text() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"text


text"####));
        });
    }

// Spec error tests

    #[test]
    fn lt_in_attribute_name() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z/0  <>"####));
        });
    }

    #[test]
    fn lt_in_unquoted_attribute_value() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z x=<>"####));
        });
    }

    #[test]
    fn equals_in_unquoted_attribute_value() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z z=z=z>"####));
        });
    }

    #[test]
    fn equals_attribute() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z =>"####));
        });
    }

    #[test]
    fn equals_equals_attribute() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z ==>"####));
        });
    }

    #[test]
    fn equals_equals_equals_attribute() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z ===>"####));
        });
    }

    #[test]
    fn equals_equals_equals_equals_attribute() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z ====>"####));
        });
    }

    #[test]
    fn attribute_name_starting_with_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<foo "='bar'>"####));
        });
    }

    #[test]
    fn attribute_name_starting_with_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<foo '='bar'>"####));
        });
    }

    #[test]
    fn attribute_name_containing_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<foo a"b='bar'>"####));
        });
    }

    #[test]
    fn attribute_name_containing_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<foo a'b='bar'>"####));
        });
    }

    #[test]
    fn unquoted_attribute_value_containing_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<foo a=b'c>"####));
        });
    }

    #[test]
    fn unquoted_attribute_value_containing_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<foo a=b"c>"####));
        });
    }

    #[test]
    fn double_hyphen_quoted_attribute_value_not_followed_by_whitespace() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<foo a="b"c>"####));
        });
    }

    #[test]
    fn single_hyphen_quoted_attribute_value_not_followed_by_whitespace() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<foo a='b'c>"####));
        });
    }

    #[test]
    fn cr_eof_after_doctype_name() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!doctype html 
"####));
        });
    }

    #[test]
    fn cr_eof_in_tag_name() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z
"####));
        });
    }

    #[test]
    fn slash_eof_in_tag_name() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z/"####));
        });
    }

    #[test]
    fn zero_hex_numeric_entity() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#x0"####));
        });
    }

    #[test]
    fn zero_decimal_numeric_entity() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#0"####));
        });
    }

    #[test]
    fn empty_hex_numeric_entities() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#x &#X "####));
        });
    }

    #[test]
    fn invalid_digit_in_hex_numeric_entity() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#xZ"####));
        });
    }

    #[test]
    fn empty_decimal_numeric_entities() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&# &#; "####));
        });
    }

    #[test]
    fn invalid_digit_in_decimal_numeric_entity() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#A"####));
        });
    }

    #[test]
    fn maximum_non_hyphen_bmp_numeric_entity() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#X10FFFF;"####));
        });
    }

    #[test]
    fn above_maximum_numeric_entity() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#x110000;"####));
        });
    }

    #[test]
    fn num_32_hyphen_bit_hex_numeric_entity() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#x80000041;"####));
        });
    }

    #[test]
    fn num_33_hyphen_bit_hex_numeric_entity() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#x100000041;"####));
        });
    }

    #[test]
    fn num_33_hyphen_bit_decimal_numeric_entity() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#4294967361;"####));
        });
    }

    #[test]
    fn num_65_hyphen_bit_hex_numeric_entity() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#x10000000000000041;"####));
        });
    }

    #[test]
    fn num_65_hyphen_bit_decimal_numeric_entity() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#18446744073709551681;"####));
        });
    }

    #[test]
    fn surrogate_code_point_edge_cases() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"&#xD7FF;&#xD800;&#xD801;&#xDFFE;&#xDFFF;&#xE000;"####));
        });
    }

    #[test]
    fn duplicate_different_hyphen_case_attributes() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<x x=1 x=2 X=3>"####));
        });
    }

    #[test]
    fn uppercase_close_tag_attributes() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</x X>"####));
        });
    }

    #[test]
    fn duplicate_close_tag_attributes() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</x x x>"####));
        });
    }

    #[test]
    fn permitted_slash_but_in_close_tag() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</br/>"####));
        });
    }

    #[test]
    fn u_plus_0000_in_lookahead_region_after_non_hyphen_matching_character() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!doc> "####));
        });
    }

    #[test]
    fn u_plus_0000_in_lookahead_region() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!doc "####));
        });
    }

    #[test]
    fn u_plus_0080_in_lookahead_region() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!doc"####));
        });
    }

    #[test]
    fn u_plus_fdd1_in_lookahead_region() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!doc﷑"####));
        });
    }

    #[test]
    fn u_plus_1ffff_in_lookahead_region() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!doc🿿"####));
        });
    }

    #[test]
    fn doctype_publik() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE html PUBLIK "AbC" "XyZ">"####));
        });
    }

    #[test]
    fn doctype_publi() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE html PUBLI"####));
        });
    }

    #[test]
    fn doctype_sistem() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE html SISTEM "AbC">"####));
        });
    }

    #[test]
    fn doctype_sys() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE html SYS"####));
        });
    }

    #[test]
    fn doctype_html_x_gt_text() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE html x>text"####));
        });
    }

    #[test]
    fn grave_accent_in_unquoted_attribute() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=aa`>"####));
        });
    }

    #[test]
    fn eof_in_tag_name_state() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a"####));
        });
    }

    #[test]
    fn eof_in_before_attribute_name_state() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a "####));
        });
    }

    #[test]
    fn eof_in_attribute_name_state() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a"####));
        });
    }

    #[test]
    fn eof_in_after_attribute_name_state() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a "####));
        });
    }

    #[test]
    fn eof_in_before_attribute_value_state() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a ="####));
        });
    }

    #[test]
    fn eof_in_attribute_value_double_quoted_state() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a ="a"####));
        });
    }

    #[test]
    fn eof_in_attribute_value_single_quoted_state() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a ='a"####));
        });
    }

    #[test]
    fn eof_in_attribute_value_unquoted_state() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a =a"####));
        });
    }

    #[test]
    fn eof_in_after_attribute_value_state() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a ='a'"####));
        });
    }
}