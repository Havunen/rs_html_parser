// AUTOGENERATED FILE
mod test_utils;

mod tests {
    use insta::{assert_debug_snapshot, with_settings};
    use crate::test_utils::*;


// Spec valid tests

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_hyphen_hyphen_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---- -->"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_hyphen_hyphen_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----  -->"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_a_hyphen_hyphen_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---- a-->"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_excl_mark_a_hyphen_hyphen_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----!a-->"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_excl_mark_hyphen_hyphen_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----!-->"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---->"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a >"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a>"####));
        });
    }

    #[test]
    fn lt_a_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</A>"####));
        });
    }

    #[test]
    fn lt_b_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</B>"####));
        });
    }

    #[test]
    fn lt_y_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</Y>"####));
        });
    }

    #[test]
    fn lt_z_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</Z>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</a>"####));
        });
    }

    #[test]
    fn lt_b_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</b>"####));
        });
    }

    #[test]
    fn lt_y_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</y>"####));
        });
    }

    #[test]
    fn lt_z_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</z>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<A>"####));
        });
    }

    #[test]
    fn lt_b_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<B>"####));
        });
    }

    #[test]
    fn lt_y_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<Y>"####));
        });
    }

    #[test]
    fn lt_z_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<Z>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a>"####));
        });
    }

    #[test]
    fn lt_a_u0009_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a	>"####));
        });
    }

    #[test]
    fn lt_a_u000a_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a
>"####));
        });
    }

    #[test]
    fn lt_a_u000c_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a>"####));
        });
    }

    #[test]
    fn lt_a_u000d_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a
>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a >"####));
        });
    }

    #[test]
    fn lt_a_u0009_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a 	>"####));
        });
    }

    #[test]
    fn lt_a_u000a_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a 
>"####));
        });
    }

    #[test]
    fn lt_a_u000c_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a >"####));
        });
    }

    #[test]
    fn lt_a_u000d_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a 
>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a  >"####));
        });
    }

    #[test]
    fn lt_a_excl_mark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a !>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_6() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a #>"####));
        });
    }

    #[test]
    fn lt_a_amp_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a &>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_7() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a (>"####));
        });
    }

    #[test]
    fn lt_a_hyphen_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a ->"####));
        });
    }

    #[test]
    fn lt_a_dot_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a .>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_8() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a />"####));
        });
    }

    #[test]
    fn lt_a_0_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a 0>"####));
        });
    }

    #[test]
    fn lt_a_1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a 1>"####));
        });
    }

    #[test]
    fn lt_a_9_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a 9>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a >"####));
        });
    }

    #[test]
    fn lt_a_qmark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a ?>"####));
        });
    }

    #[test]
    fn lt_a_at_mark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a @>"####));
        });
    }

    #[test]
    fn lt_a_a_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a A>"####));
        });
    }

    #[test]
    fn lt_a_b_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a B>"####));
        });
    }

    #[test]
    fn lt_a_y_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a Y>"####));
        });
    }

    #[test]
    fn lt_a_z_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a Z>"####));
        });
    }

    #[test]
    fn lt_a_opn_bracket_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a [>"####));
        });
    }

    #[test]
    fn lt_a_apos2_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a `>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a>"####));
        });
    }

    #[test]
    fn lt_a_a_u0009_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a	>"####));
        });
    }

    #[test]
    fn lt_a_a_u000a_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a
>"####));
        });
    }

    #[test]
    fn lt_a_a_u000c_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a>"####));
        });
    }

    #[test]
    fn lt_a_a_u000d_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a
>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a >"####));
        });
    }

    #[test]
    fn lt_a_a_u0009_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a 	>"####));
        });
    }

    #[test]
    fn lt_a_a_u000a_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a 
>"####));
        });
    }

    #[test]
    fn lt_a_a_u000c_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a >"####));
        });
    }

    #[test]
    fn lt_a_a_u000d_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a 
>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a  >"####));
        });
    }

    #[test]
    fn lt_a_a_excl_mark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a !>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a #>"####));
        });
    }

    #[test]
    fn lt_a_a_amp_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a &>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a (>"####));
        });
    }

    #[test]
    fn lt_a_a_hyphen_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a ->"####));
        });
    }

    #[test]
    fn lt_a_a_dot_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a .>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_6() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a />"####));
        });
    }

    #[test]
    fn lt_a_a_0_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a 0>"####));
        });
    }

    #[test]
    fn lt_a_a_1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a 1>"####));
        });
    }

    #[test]
    fn lt_a_a_9_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a 9>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_7() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a >"####));
        });
    }

    #[test]
    fn lt_a_a_qmark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a ?>"####));
        });
    }

    #[test]
    fn lt_a_a_at_mark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a @>"####));
        });
    }

    #[test]
    fn lt_a_a_b_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a B>"####));
        });
    }

    #[test]
    fn lt_a_a_y_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a Y>"####));
        });
    }

    #[test]
    fn lt_a_a_z_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a Z>"####));
        });
    }

    #[test]
    fn lt_a_a_opn_bracket_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a [>"####));
        });
    }

    #[test]
    fn lt_a_a_apos2_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a `>"####));
        });
    }

    #[test]
    fn lt_a_a_b_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a b>"####));
        });
    }

    #[test]
    fn lt_a_a_y_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a y>"####));
        });
    }

    #[test]
    fn lt_a_a_z_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a z>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_8() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a {>"####));
        });
    }

    #[test]
    fn lt_a_a_udbc0_udc00_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a 􀀀>"####));
        });
    }

    #[test]
    fn lt_a_a_excl_mark_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a!>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a#>"####));
        });
    }

    #[test]
    fn lt_a_a_amp_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a&>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_10() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a(>"####));
        });
    }

    #[test]
    fn lt_a_a_hyphen_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a->"####));
        });
    }

    #[test]
    fn lt_a_a_dot_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a.>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_11() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a/>"####));
        });
    }

    #[test]
    fn lt_a_a0_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a0>"####));
        });
    }

    #[test]
    fn lt_a_a1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a1>"####));
        });
    }

    #[test]
    fn lt_a_a9_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a9>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_excl_mark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=!>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_u0009_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="	">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_u000a_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="
">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_u000c_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_dbl_quote_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=" ">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_excl_mark_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="!">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_dbl_quote_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_dbl_quote_gt_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="#">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_percent_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="%">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_amp_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="&">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_apos1_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="'">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_hyphen_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="-">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_dbl_quote_gt_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="/">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_0_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="0">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_1_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="1">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_9_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="9">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_lt_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="<">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_equals_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="=">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_gt_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=">">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_qmark_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="?">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_at_mark_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="@">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_a_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="A">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_b_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="B">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_y_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="Y">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_z_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="Z">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_apos2_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="`">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_a_dbl_quote_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="a">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_b_dbl_quote_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="b">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_y_dbl_quote_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="y">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_z_dbl_quote_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="z">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_dbl_quote_gt_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="{">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_udbc0_udc00_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="􀀀">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=#>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_percent_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=%>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_amp_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=&>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_u0009_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='	'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_u000a_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='
'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_u000c_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=' '>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_excl_mark_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='!'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_dbl_quote_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='"'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_percent_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='%'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_amp_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='&'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_u0009_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''	>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_u000a_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''
>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_u000c_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_u000d_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''
>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_gt_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='' >"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_gt_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''/>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_gt_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_gt_gen_6() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='('>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_hyphen_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='-'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_gt_gen_7() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='/'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_0_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='0'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_1_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='1'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_9_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='9'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_lt_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='<'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_equals_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='='>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_gt_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='>'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_qmark_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='?'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_at_mark_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='@'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_a_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='A'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_b_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='B'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_y_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='Y'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_z_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='Z'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos2_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='`'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_a_apos1_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='a'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_b_apos1_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='b'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_y_apos1_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='y'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_z_apos1_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='z'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_gt_gen_8() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='{'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_udbc0_udc00_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='􀀀'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=(>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_hyphen_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=->"####));
        });
    }

    #[test]
    fn lt_a_a_equals_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=/>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_0_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=0>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=1>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_9_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=9>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_qmark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=?>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_at_mark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=@>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=A>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_b_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=B>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_y_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=Y>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_z_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=Z>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_u0009_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a	>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_u000a_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a
>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_u000c_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_u000d_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a
>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a >"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_excl_mark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a!>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_gt_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a#>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_percent_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a%>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_amp_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a&>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_gt_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a(>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_hyphen_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a->"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_gt_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a/>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a0_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a0>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a1>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a9_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a9>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_gt_gen_6() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_qmark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a?>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_at_mark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a@>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_aa_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=aA>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_ab_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=aB>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_ay_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=aY>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_az_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=aZ>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_aa_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=aa>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_ab_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=ab>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_ay_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=ay>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_az_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=az>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_gt_gen_7() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a{>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_udbc0_udc00_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a􀀀>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_b_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=b>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_y_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=y>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_z_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=z>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_gt_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a={>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_udbc0_udc00_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=􀀀>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_12() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a>"####));
        });
    }

    #[test]
    fn lt_a_a_qmark_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a?>"####));
        });
    }

    #[test]
    fn lt_a_a_at_mark_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a@>"####));
        });
    }

    #[test]
    fn lt_a_aa_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a aA>"####));
        });
    }

    #[test]
    fn lt_a_ab_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a aB>"####));
        });
    }

    #[test]
    fn lt_a_ay_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a aY>"####));
        });
    }

    #[test]
    fn lt_a_az_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a aZ>"####));
        });
    }

    #[test]
    fn lt_a_a_opn_bracket_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a[>"####));
        });
    }

    #[test]
    fn lt_a_a_apos2_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a`>"####));
        });
    }

    #[test]
    fn lt_a_aa_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a aa>"####));
        });
    }

    #[test]
    fn lt_a_ab_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a ab>"####));
        });
    }

    #[test]
    fn lt_a_ay_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a ay>"####));
        });
    }

    #[test]
    fn lt_a_az_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a az>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_13() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a{>"####));
        });
    }

    #[test]
    fn lt_a_a_udbc0_udc00_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a􀀀>"####));
        });
    }

    #[test]
    fn lt_a_b_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a b>"####));
        });
    }

    #[test]
    fn lt_a_y_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a y>"####));
        });
    }

    #[test]
    fn lt_a_z_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a z>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_10() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a {>"####));
        });
    }

    #[test]
    fn lt_a_udbc0_udc00_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a 􀀀>"####));
        });
    }

    #[test]
    fn lt_a_excl_mark_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a!>"####));
        });
    }

    #[test]
    fn lt_a_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a">"####));
        });
    }

    #[test]
    fn lt_a_amp_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a&>"####));
        });
    }

    #[test]
    fn lt_a_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a'>"####));
        });
    }

    #[test]
    fn lt_a_hyphen_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a->"####));
        });
    }

    #[test]
    fn lt_a_dot_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a.>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_11() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_12() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/>"####));
        });
    }

    #[test]
    fn lt_a0_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a0>"####));
        });
    }

    #[test]
    fn lt_a1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a1>"####));
        });
    }

    #[test]
    fn lt_a9_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a9>"####));
        });
    }

    #[test]
    fn lt_a_lt_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a<>"####));
        });
    }

    #[test]
    fn lt_a_equals_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a=>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_13() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a>"####));
        });
    }

    #[test]
    fn lt_a_qmark_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a?>"####));
        });
    }

    #[test]
    fn lt_a_at_mark_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a@>"####));
        });
    }

    #[test]
    fn lt_aa_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<aA>"####));
        });
    }

    #[test]
    fn lt_ab_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<aB>"####));
        });
    }

    #[test]
    fn lt_ay_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<aY>"####));
        });
    }

    #[test]
    fn lt_az_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<aZ>"####));
        });
    }

    #[test]
    fn lt_a_opn_bracket_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a[>"####));
        });
    }

    #[test]
    fn lt_a_apos2_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a`>"####));
        });
    }

    #[test]
    fn lt_aa_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<aa>"####));
        });
    }

    #[test]
    fn lt_ab_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<ab>"####));
        });
    }

    #[test]
    fn lt_ay_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<ay>"####));
        });
    }

    #[test]
    fn lt_az_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<az>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_14() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a{>"####));
        });
    }

    #[test]
    fn lt_a_udbc0_udc00_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a􀀀>"####));
        });
    }

    #[test]
    fn lt_b_gt_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<b>"####));
        });
    }

    #[test]
    fn lt_y_gt_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<y>"####));
        });
    }

    #[test]
    fn lt_z_gt_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<z>"####));
        });
    }

// Spec error tests

    #[test]
    fn lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<"####));
        });
    }

    #[test]
    fn lt_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"< "####));
        });
    }

    #[test]
    fn lt_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<	"####));
        });
    }

    #[test]
    fn lt_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<
"####));
        });
    }

    #[test]
    fn lt_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<"####));
        });
    }

    #[test]
    fn lt_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<"####));
        });
    }

    #[test]
    fn lt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"< "####));
        });
    }

    #[test]
    fn lt_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!"####));
        });
    }

    #[test]
    fn lt_excl_mark_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<! "####));
        });
    }

    #[test]
    fn lt_excl_mark_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!	"####));
        });
    }

    #[test]
    fn lt_excl_mark_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!
"####));
        });
    }

    #[test]
    fn lt_excl_mark_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!"####));
        });
    }

    #[test]
    fn lt_excl_mark_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!"####));
        });
    }

    #[test]
    fn lt_excl_mark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<! "####));
        });
    }

    #[test]
    fn lt_excl_mark_u0000_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!  "####));
        });
    }

    #[test]
    fn lt_excl_mark_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!!"####));
        });
    }

    #[test]
    fn lt_excl_mark_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!""####));
        });
    }

    #[test]
    fn lt_excl_mark_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!&"####));
        });
    }

    #[test]
    fn lt_excl_mark_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!'"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- "####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--	"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--
"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- "####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_u0000_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--  "####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_u0009_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- 	"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_u000a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- 
"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_u000b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- "####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_u000c_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- "####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--  "####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- !"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- ""####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- &"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- '"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_comma() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- ,"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- - "####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -	"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -
"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- - "####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -!"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -""####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -&"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -'"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_comma() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -,"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- --"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_dot() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -."####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -/"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -0"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -1"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -9"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -<"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -="####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- ->"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -?"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -@"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -A"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -B"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -`"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -a"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -b"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -y"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -z"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -{"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- -􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_dot() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- ."####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- /"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- 0"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- 1"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- 9"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- <"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- ="####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- >"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- ?"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- @"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- A"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- B"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- `"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- a"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- b"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- y"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- z"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- {"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-- 􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_excl_mark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--!"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_dbl_quote_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--""####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_amp_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--&"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_apos1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--'"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_comma_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--,"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_u0000_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--- "####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_u0009_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---	"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_u000a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---
"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_u000b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_u000c_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--- "####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_excl_mark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---!"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_dbl_quote_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---""####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_amp_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---&"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_apos1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---'"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_comma_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---,"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---- "####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----	"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----
"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---- "####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---- -"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_hyphen_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---- --"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----!"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_excl_mark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----!>"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_excl_mark_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----! >"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_excl_mark_lf_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----!
>"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_excl_mark_cr_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----!
>"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_excl_mark_crlf_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----!

>"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_excl_mark_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----!a"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_excl_mark_a_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----!a-"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_excl_mark_a_hyphen_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----!a--"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_excl_mark_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----!-"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_excl_mark_hyphen_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----!--"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----""####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----&"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----'"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_comma() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----,"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_hyphen_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!-----"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_dot() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----."####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----/"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----0"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----1"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----9"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----<"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----="####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----?"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----@"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----A"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----B"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----`"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----a"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----b"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----y"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----z"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----{"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_hyphen_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!----􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_dot_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---."####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_gen_6() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---/"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_0_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---0"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---1"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_9_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---9"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_lt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---<"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_equals_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---="####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_qmark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---?"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_at_mark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---@"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_a_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---A"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_b_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---B"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_y_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_z_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_apos2_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---`"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_a_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---a"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_b_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---b"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_y_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---y"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_z_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---z"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_gen_7() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---{"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_hyphen_udbc0_udc00_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!---􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_dot_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--."####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--/"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_0_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--0"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--1"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_9_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--9"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_lt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--<"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_equals_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--="####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_qmark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--?"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_at_mark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--@"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_a_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--A"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_b_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--B"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_y_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_z_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_apos2_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--`"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_a_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--a"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_b_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--b"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_y_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--y"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_z_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--z"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_gen_6() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--{"####));
        });
    }

    #[test]
    fn lt_excl_mark_hyphen_hyphen_udbc0_udc00_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!--􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!/"####));
        });
    }

    #[test]
    fn lt_excl_mark_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!0"####));
        });
    }

    #[test]
    fn lt_excl_mark_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!1"####));
        });
    }

    #[test]
    fn lt_excl_mark_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!9"####));
        });
    }

    #[test]
    fn lt_excl_mark_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!<"####));
        });
    }

    #[test]
    fn lt_excl_mark_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!="####));
        });
    }

    #[test]
    fn lt_excl_mark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!>"####));
        });
    }

    #[test]
    fn lt_excl_mark_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!?"####));
        });
    }

    #[test]
    fn lt_excl_mark_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!@"####));
        });
    }

    #[test]
    fn lt_excl_mark_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!A"####));
        });
    }

    #[test]
    fn lt_excl_mark_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u0008() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u000d() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u001f() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u0000_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE  "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u0008_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u0009_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE 	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u000a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE 
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u000b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u000c_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u000d_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE 
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_u001f_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE  "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE !"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE ""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE &"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE '"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE -"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE /"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE 0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE 1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE 9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE <"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE ="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE >"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE ?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE @"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_opn_bracket() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE ["####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE `"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u0008() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u000d() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u001f() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u0000_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a  "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u0008_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u0009_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a 	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u000a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a 
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u000b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u000c_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u000d_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a 
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_u001f_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a  "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a !"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a ""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a &"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a '"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a -"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a /"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a 0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a 1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a 9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a <"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a ="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a ?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a @"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_u0008() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_u000d() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_u001f() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC" "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC" "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_dbl_quote_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"" "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_dbl_quote_u0000_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC""  "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"#"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC">"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_dbl_quote_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC"􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC#"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_u0008() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_u000d() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_u001f() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''#"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_apos1_apos1_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'''' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_apos1_apos1_x_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''''x "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_apos1_apos1_u0000_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''''  "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_apos1_apos1_x_u0000_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'''' x "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''("####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos1_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC''􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'("####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos1_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC'􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC("####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_publica() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLICA"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_publicb() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLICB"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_publicy() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLICY"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_publicz() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLICZ"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_publica_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLICa"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_publicb_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLICb"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_publicy_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLICy"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_publicz_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLICz"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_public_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a PUBLIC􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_u0000_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM  "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_x_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM  "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_u0008() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_u000d() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_u001f() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM" "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM" "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"#"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM">"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_dbl_quote_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM"􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM#"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_u0008() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_u000d() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_u001f() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_u0000_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''  "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_x_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'' x "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos1_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM''􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'("####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos1_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM'􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM("####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_systema() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEMA"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_systemb() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEMB"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_systemy() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEMY"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_systemz() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEMZ"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_systema_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEMa"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_systemb_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEMb"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_systemy_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEMy"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_systemz_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEMz"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_system_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a SYSTEM􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a `"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_aa() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a aA"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_ab() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a aB"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_ay() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a aY"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_az() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a aZ"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_aa_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a aa"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_ab_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a ab"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_ay_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a ay"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_az_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a az"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_a_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a a􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a {"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a 􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_excl_mark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_dbl_quote_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_amp_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_apos1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_hyphen_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_gen_6() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_lt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_equals_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_qmark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_at_mark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_aa() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE aA"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_ab() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE aB"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_ay() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE aY"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_az() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE aZ"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_opn_bracket() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a["####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_apos2_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_aa_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE aa"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_ab_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE ab"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_ay_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE ay"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_az_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE az"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_gen_7() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_a_udbc0_udc00_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE a􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE {"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE 􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_excl_mark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_dbl_quote_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_amp_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_apos1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_hyphen_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_lt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_equals_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_qmark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_at_mark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEA"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypeb() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEB"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypey() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEY"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypez() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEZ"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_apos2_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u0008() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u000d() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u001f() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u0000_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa  "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u0008_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u0009_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa 	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u000a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa 
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u000b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u000c_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u000d_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa 
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_u001f_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa  "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa !"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa ""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa &"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa '"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa -"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa /"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa 0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa 1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa 9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa <"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa ="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa >"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa ?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa @"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_u0008() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_u000d() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_u001f() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC" "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC" "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"#"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC">"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_dbl_quote_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC"􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC#"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_u0008() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_u000d() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_u001f() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''#"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''("####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos1_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC''􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'("####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos1_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC'􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC("####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_publica() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLICA"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_publicb() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLICB"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_publicy() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLICY"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_publicz() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLICZ"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_publica_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLICa"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_publicb_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLICb"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_publicy_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLICy"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_publicz_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLICz"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_public_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa PUBLIC􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_u0008() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_u000d() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_u001f() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM" "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM" "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"#"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM">"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_dbl_quote_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM"􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM#"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_u0008() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_u000d() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_u001f() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'' "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'''"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos1_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM''􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'("####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'A"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'B"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos1_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM'􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM("####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_systema() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEMA"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_systemb() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEMB"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_systemy() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEMY"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_systemz() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEMZ"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_systema_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEMa"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_systemb_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEMb"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_systemy_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEMy"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_systemz_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEMz"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_system_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa SYSTEM􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa `"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a	"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a
"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a "####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_aa() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa aA"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_ab() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa aB"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_ay() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa aY"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_az() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa aZ"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_aa_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa aa"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_ab_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa ab"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_ay_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa ay"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_az_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa az"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_a_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa a􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa b"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa y"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa z"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa {"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa 􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_excl_mark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa!"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_dbl_quote_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa""####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_amp_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa&"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_apos1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa'"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_hyphen_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa-"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_gen_6() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa/"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa0"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa1"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa9"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_lt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa<"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_equals_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa="####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa>"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_qmark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa?"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_at_mark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa@"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypeaa() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEaA"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypeab() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEaB"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypeay() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEaY"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypeaz() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEaZ"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_opn_bracket() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa["####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_apos2_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa`"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypeaa_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEaa"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypeab_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEab"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypeay_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEay"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypeaz_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEaz"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_gen_7() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypea_udbc0_udc00_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEa􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypeb_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEb"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypey_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEy"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctypez_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPEz"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_gen_6() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE{"####));
        });
    }

    #[test]
    fn lt_excl_mark_doctype_udbc0_udc00_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!DOCTYPE􀀀"####));
        });
    }

    #[test]
    fn lt_excl_mark_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!Y"####));
        });
    }

    #[test]
    fn lt_excl_mark_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!Z"####));
        });
    }

    #[test]
    fn lt_excl_mark_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!`"####));
        });
    }

    #[test]
    fn lt_excl_mark_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!a"####));
        });
    }

    #[test]
    fn lt_excl_mark_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!b"####));
        });
    }

    #[test]
    fn lt_excl_mark_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!y"####));
        });
    }

    #[test]
    fn lt_excl_mark_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!z"####));
        });
    }

    #[test]
    fn lt_excl_mark_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!{"####));
        });
    }

    #[test]
    fn lt_excl_mark_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<!􀀀"####));
        });
    }

    #[test]
    fn lt_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<""####));
        });
    }

    #[test]
    fn lt_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<&"####));
        });
    }

    #[test]
    fn lt_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<'"####));
        });
    }

    #[test]
    fn lt_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<-"####));
        });
    }

    #[test]
    fn lt_dot() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<."####));
        });
    }

    #[test]
    fn lt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</"####));
        });
    }

    #[test]
    fn lt_u0000_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</ "####));
        });
    }

    #[test]
    fn lt_u0009_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</	"####));
        });
    }

    #[test]
    fn lt_u000a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</
"####));
        });
    }

    #[test]
    fn lt_u000b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</"####));
        });
    }

    #[test]
    fn lt_u000c_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</"####));
        });
    }

    #[test]
    fn lt_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</ "####));
        });
    }

    #[test]
    fn lt_u0000_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</  "####));
        });
    }

    #[test]
    fn lt_excl_mark_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</!"####));
        });
    }

    #[test]
    fn lt_dbl_quote_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</""####));
        });
    }

    #[test]
    fn lt_amp_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</&"####));
        });
    }

    #[test]
    fn lt_apos1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</'"####));
        });
    }

    #[test]
    fn lt_hyphen_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</-"####));
        });
    }

    #[test]
    fn lt_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<//"####));
        });
    }

    #[test]
    fn lt_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</0"####));
        });
    }

    #[test]
    fn lt_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</1"####));
        });
    }

    #[test]
    fn lt_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</9"####));
        });
    }

    #[test]
    fn lt_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</<"####));
        });
    }

    #[test]
    fn lt_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</="####));
        });
    }

    #[test]
    fn lt_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</>"####));
        });
    }

    #[test]
    fn lt_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</?"####));
        });
    }

    #[test]
    fn lt_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</@"####));
        });
    }

    #[test]
    fn lt_opn_bracket() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</["####));
        });
    }

    #[test]
    fn lt_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</`"####));
        });
    }

    #[test]
    fn lt_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</{"####));
        });
    }

    #[test]
    fn lt_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"</􀀀"####));
        });
    }

    #[test]
    fn lt_0_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<0"####));
        });
    }

    #[test]
    fn lt_1_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<1"####));
        });
    }

    #[test]
    fn lt_9_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<9"####));
        });
    }

    #[test]
    fn lt_lt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<<"####));
        });
    }

    #[test]
    fn lt_equals_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<="####));
        });
    }

    #[test]
    fn lt_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<>"####));
        });
    }

    #[test]
    fn lt_qmark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?"####));
        });
    }

    #[test]
    fn lt_qmark_u0000() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<? "####));
        });
    }

    #[test]
    fn lt_qmark_u0009() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?	"####));
        });
    }

    #[test]
    fn lt_qmark_u000a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?
"####));
        });
    }

    #[test]
    fn lt_qmark_u000b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?"####));
        });
    }

    #[test]
    fn lt_qmark_u000c() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?"####));
        });
    }

    #[test]
    fn lt_qmark_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<? "####));
        });
    }

    #[test]
    fn lt_qmark_u0000_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?  "####));
        });
    }

    #[test]
    fn lt_qmark_excl_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?!"####));
        });
    }

    #[test]
    fn lt_qmark_dbl_quote() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?""####));
        });
    }

    #[test]
    fn lt_qmark_amp() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?&"####));
        });
    }

    #[test]
    fn lt_qmark_apos1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?'"####));
        });
    }

    #[test]
    fn lt_qmark_hyphen() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?-"####));
        });
    }

    #[test]
    fn lt_qmark_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?/"####));
        });
    }

    #[test]
    fn lt_qmark_0() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?0"####));
        });
    }

    #[test]
    fn lt_qmark_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?1"####));
        });
    }

    #[test]
    fn lt_qmark_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?9"####));
        });
    }

    #[test]
    fn lt_qmark_lt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?<"####));
        });
    }

    #[test]
    fn lt_qmark_equals() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?="####));
        });
    }

    #[test]
    fn lt_qmark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?>"####));
        });
    }

    #[test]
    fn lt_qmark_qmark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<??"####));
        });
    }

    #[test]
    fn lt_qmark_at_mark() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?@"####));
        });
    }

    #[test]
    fn lt_qmark_a() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?A"####));
        });
    }

    #[test]
    fn lt_qmark_b() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?B"####));
        });
    }

    #[test]
    fn lt_qmark_y() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?Y"####));
        });
    }

    #[test]
    fn lt_qmark_z() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?Z"####));
        });
    }

    #[test]
    fn lt_qmark_apos2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?`"####));
        });
    }

    #[test]
    fn lt_qmark_a_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?a"####));
        });
    }

    #[test]
    fn lt_qmark_b_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?b"####));
        });
    }

    #[test]
    fn lt_qmark_y_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?y"####));
        });
    }

    #[test]
    fn lt_qmark_z_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?z"####));
        });
    }

    #[test]
    fn lt_qmark_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?{"####));
        });
    }

    #[test]
    fn lt_qmark_udbc0_udc00() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<?􀀀"####));
        });
    }

    #[test]
    fn lt_at_mark_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<@"####));
        });
    }

    #[test]
    fn lt_opn_bracket_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<["####));
        });
    }

    #[test]
    fn lt_apos2_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<`"####));
        });
    }

    #[test]
    fn lt_a_u0000_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a >"####));
        });
    }

    #[test]
    fn lt_a_u0008_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a>"####));
        });
    }

    #[test]
    fn lt_a_u000b_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a>"####));
        });
    }

    #[test]
    fn lt_a_u001f_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a>"####));
        });
    }

    #[test]
    fn lt_a_u0000_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a  >"####));
        });
    }

    #[test]
    fn lt_a_u0008_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a >"####));
        });
    }

    #[test]
    fn lt_a_u000b_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a >"####));
        });
    }

    #[test]
    fn lt_a_u001f_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a >"####));
        });
    }

    #[test]
    fn lt_a_dbl_quote_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a ">"####));
        });
    }

    #[test]
    fn lt_a_apos1_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a '>"####));
        });
    }

    #[test]
    fn lt_a_lt_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a <>"####));
        });
    }

    #[test]
    fn lt_a_equals_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a =>"####));
        });
    }

    #[test]
    fn lt_a_a_u0000_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a >"####));
        });
    }

    #[test]
    fn lt_a_a_u0008_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a>"####));
        });
    }

    #[test]
    fn lt_a_a_u000b_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a>"####));
        });
    }

    #[test]
    fn lt_a_a_u001f_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a>"####));
        });
    }

    #[test]
    fn lt_a_a_u0000_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a  >"####));
        });
    }

    #[test]
    fn lt_a_a_u0008_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a >"####));
        });
    }

    #[test]
    fn lt_a_a_u000b_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a >"####));
        });
    }

    #[test]
    fn lt_a_a_u001f_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a >"####));
        });
    }

    #[test]
    fn lt_a_a_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a ">"####));
        });
    }

    #[test]
    fn lt_a_a_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a '>"####));
        });
    }

    #[test]
    fn lt_a_a_lt_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a <>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_gt_gen_4() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a =>"####));
        });
    }

    #[test]
    fn lt_a_a_a_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a A>"####));
        });
    }

    #[test]
    fn lt_a_a_a_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a a>"####));
        });
    }

    #[test]
    fn lt_a_a_dbl_quote_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a">"####));
        });
    }

    #[test]
    fn lt_a_a_apos1_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a'>"####));
        });
    }

    #[test]
    fn lt_a_a_lt_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a<>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_gt_gen_5() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_u0000_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a= >"####));
        });
    }

    #[test]
    fn lt_a_a_equals_u0008_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_u0009_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=	>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_u000a_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=
>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_u000b_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_u000c_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_u000d_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=
>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_u001f_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_gt_gen_6() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a= >"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_u0000_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=" ">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_dbl_quote_u000b_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a="">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_u0000_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=' '>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_u000b_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_u0000_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='' >"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_u0008_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_u000b_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_u001f_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_excl_mark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''!>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_amp_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''&>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a='''>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_hyphen_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''->"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_dot_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''.>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_0_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''0>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''1>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_9_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''9>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_lt_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''<>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_equals_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''=>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_qmark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''?>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_at_mark_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''@>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_a_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''A>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_b_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''B>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_y_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''Y>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_z_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''Z>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_apos2_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''`>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_a_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''a>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_b_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''b>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_y_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''y>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_z_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''z>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_gt_gen_9() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''{>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos1_apos1_udbc0_udc00_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=''􀀀>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_lt_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=<>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_equals_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a==>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_gt_gen_7() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_apos2_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=`>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_u0000_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a >"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_u0008_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_u000b_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_u001f_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_dbl_quote_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a">"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_apos1_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a'>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_lt_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a<>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_equals_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a=>"####));
        });
    }

    #[test]
    fn lt_a_a_equals_a_apos2_gt() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a a=a`>"####));
        });
    }

    #[test]
    fn lt_a_u0000_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/ >"####));
        });
    }

    #[test]
    fn lt_a_u0009_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/	>"####));
        });
    }

    #[test]
    fn lt_a_u000a_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/
>"####));
        });
    }

    #[test]
    fn lt_a_u000b_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/>"####));
        });
    }

    #[test]
    fn lt_a_u000c_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_15() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/ >"####));
        });
    }

    #[test]
    fn lt_a_excl_mark_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/!>"####));
        });
    }

    #[test]
    fn lt_a_dbl_quote_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/">"####));
        });
    }

    #[test]
    fn lt_a_amp_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/&>"####));
        });
    }

    #[test]
    fn lt_a_apos1_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/'>"####));
        });
    }

    #[test]
    fn lt_a_hyphen_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/->"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_16() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a//>"####));
        });
    }

    #[test]
    fn lt_a_0_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/0>"####));
        });
    }

    #[test]
    fn lt_a_1_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/1>"####));
        });
    }

    #[test]
    fn lt_a_9_gt_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/9>"####));
        });
    }

    #[test]
    fn lt_a_lt_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/<>"####));
        });
    }

    #[test]
    fn lt_a_equals_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/=>"####));
        });
    }

    #[test]
    fn lt_a_qmark_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/?>"####));
        });
    }

    #[test]
    fn lt_a_at_mark_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/@>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_14() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/A>"####));
        });
    }

    #[test]
    fn lt_a_b_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/B>"####));
        });
    }

    #[test]
    fn lt_a_y_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/Y>"####));
        });
    }

    #[test]
    fn lt_a_z_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/Z>"####));
        });
    }

    #[test]
    fn lt_a_apos2_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/`>"####));
        });
    }

    #[test]
    fn lt_a_a_gt_gen_15() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/a>"####));
        });
    }

    #[test]
    fn lt_a_b_gt_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/b>"####));
        });
    }

    #[test]
    fn lt_a_y_gt_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/y>"####));
        });
    }

    #[test]
    fn lt_a_z_gt_gen_3() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/z>"####));
        });
    }

    #[test]
    fn lt_a_gt_gen_17() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/{>"####));
        });
    }

    #[test]
    fn lt_a_udbc0_udc00_gt_gen_2() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<a/􀀀>"####));
        });
    }

    #[test]
    fn lt_gen_6() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<{"####));
        });
    }

    #[test]
    fn lt_udbc0_udc00_gen_1() {
        with_settings!({sort_maps =>true}, {
            assert_debug_snapshot!(parser_test(r####"<􀀀"####));
        });
    }
}